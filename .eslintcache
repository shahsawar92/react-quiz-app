[{"E:\\github\\react_app\\react_quiz_app\\src\\index.tsx":"1","E:\\github\\react_app\\react_quiz_app\\src\\reportWebVitals.ts":"2","E:\\github\\react_app\\react_quiz_app\\src\\App.tsx":"3","E:\\github\\react_app\\react_quiz_app\\src\\Components\\Question_card.tsx":"4","E:\\github\\react_app\\react_quiz_app\\src\\Components\\API.tsx":"5","E:\\github\\react_app\\react_quiz_app\\src\\Components\\utilities.tsx":"6"},{"size":500,"mtime":1610040799303,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1610040799303,"results":"9","hashOfConfig":"8"},{"size":4715,"mtime":1610572023067,"results":"10","hashOfConfig":"8"},{"size":994,"mtime":1610571278321,"results":"11","hashOfConfig":"8"},{"size":725,"mtime":1610550347862,"results":"12","hashOfConfig":"8"},{"size":78,"mtime":1610134267469,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"15x4mo4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\github\\react_app\\react_quiz_app\\src\\index.tsx",[],["29","30"],"E:\\github\\react_app\\react_quiz_app\\src\\reportWebVitals.ts",[],"E:\\github\\react_app\\react_quiz_app\\src\\App.tsx",["31","32"],"import React,{useState} from 'react';\nimport { Alert, Button, Card, Container, Form,Navbar, Spinner } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { fetchQuestions , questionState} from './Components/API';\nimport {Question_card} from './Components/Question_card';\n\n\nfunction App() {\n  //object type for answer that store info for user answers\n  type AnswerObj={\n    question: string;\n    answer: string;\n    correct:boolean;\n    correct_answer: string;\n  }\n//setting states for different properties\n  const [loading, setloading] = useState(false);\n  const [questions,setquestions]=useState<questionState[]>([]);\n  const [score, setscore]= useState(0);\n  const [number,setnumber]= useState(0);\n  const [uans,setuans]= useState<AnswerObj[]>([   ]); \n  const [gameover, setgameover]=useState(true);\n  const [defeculty,setdefeculty]=useState<string>(\"easy\");\n  const [noOfQuestion, setnoOFQuestion]=useState<number>(10);\n  console.log(\"total:\",noOfQuestion)\n  //functionality as the start button is clicked\n  const startquiz= async() => { \n    setloading(true);\n    setgameover(false);\n    const newQuestions= await fetchQuestions(noOfQuestion,defeculty);\n    setquestions(newQuestions);\n    setscore(0);\n    setuans([]);\n    setnumber(0);\n    setloading(false);\n   };\n   // functionality as next question button is clicked\n   const nextQ= async() => { \n       const nextQ=number+1; \n       if(nextQ === noOfQuestion )\n       {\n            setgameover(true);     \n            \n       }\n       else\n       {\n            setnumber(nextQ)\n       }\n   };\n   // User input diffeculty level\n   const setvalue= (event:any)=>{\n     setdefeculty(event.target.value);\n   }\n   // user input for total questions\n   const noOfQuestions= (event:any)=>\n   {\n     setnoOFQuestion(event.target.value);\n    }\n    // check user answer and verify is corectness\n    const checkAnswer=(event: React.MouseEvent<HTMLButtonElement>) =>{\n       if(!gameover){\n            const answer= event.currentTarget.innerText;\n//            console.log(event.currentTarget.innerText)\n            const correct = questions[number].correct_answer===answer;\n       if(correct){\n            setscore(score + 1)\n       }\n\n       const AnswerObj={\n            question: questions[number].question,\n            answer,\n            correct,\n            correct_answer:questions[number].correct_answer\n       }\n       setuans(prev=>[...prev, AnswerObj])\n     }\n};\n  return (\n    <Container >\n         {/* heading name */}\n         <Navbar bg=\"dark\" variant=\"dark\">\n               <Navbar.Brand >QUIZ</Navbar.Brand>\n</Navbar>\n       \n       <br /><br />\n       {/* start button  */}\n       { gameover || uans.length == noOfQuestion ?(\n        <div>\n              <div className=\"mb-2\">\n               <Button variant=\"outline-success\" size=\"lg\" onClick={startquiz}>\n                    Start Quiz\n               </Button>\n               </div>\n               <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                    <Form.Label>Select level</Form.Label>\n                    <Form.Control as=\"select\" title=\"Select level\" onChange={setvalue}  defaultValue={defeculty}>\n                    <option value=\"easy\">EASY</option>\n                    <option value=\"medium\">MEDIUM</option>\n                    <option value=\"hard\">HARD</option>\n               </Form.Control>\n               </Form.Group>    \n               \n               <Form.Group controlId=\"formBasicPassword\">\n               <Form.Label>Questions</Form.Label>\n               <Form.Control type=\"number\" onChange={noOfQuestions} placeholder=\"Number of Questions\" />\n               </Form.Group>\n        </div>\n           ) : null }\n\n   {/* loading or preloader */}\n   { loading? (\n        <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner> \n   ) : null} \n\n<Card className=\"text-center\">\n   { !gameover && !loading ? (\n        <Card.Header>  <Alert  variant=\"success\">\n              <h2>SCORE: {score}</h2>\n       </Alert></Card.Header>\n   ) : null }\n\n  \n    <Card.Body>\n   { !loading && !gameover && uans.length !== noOfQuestion ? (\n         \n    <Card.Text><Question_card \n        questionNumber= {number+1}\n        totalQuestions={noOfQuestion}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={uans ? uans[number]:undefined}\n        callback={checkAnswer}\n        /></Card.Text>\n   ) : null \n   }\n    \n    {!gameover && !loading && uans.length===number+1 && number!==noOfQuestion-1?(        \n        <button onClick={nextQ}>Next Question</button> \n   ) : null}</Card.Body>\n  \n</Card>\n    </Container>\n  );\n}\n\nexport default App;\n",["33","34"],"E:\\github\\react_app\\react_quiz_app\\src\\Components\\Question_card.tsx",[],"E:\\github\\react_app\\react_quiz_app\\src\\Components\\API.tsx",[],"E:\\github\\react_app\\react_quiz_app\\src\\Components\\utilities.tsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":87,"column":34,"nodeType":"41","messageId":"42","endLine":87,"endColumn":36},{"ruleId":"43","severity":1,"message":"44","line":128,"column":16,"nodeType":"45","endLine":135,"endColumn":11},{"ruleId":"35","replacedBy":"46"},{"ruleId":"37","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Question_card must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["48"],["49"],"no-global-assign","no-unsafe-negation"]